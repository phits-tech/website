name: Build, Test, Deploy

on:
  push:
    branches:
      - main
      - develop

jobs:
  Main:
    runs-on: ubuntu-20.04

    steps:
      - name: 'Setup: Node'
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: 'Setup: Git checkout'
        uses: actions/checkout@v2

      - name: 'Setup: Extract branch name'
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: 'Setup: Extract version'
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master

      - name: 'Setup: Set env'
        uses: kanga333/variable-mapper@v0.2.0
        with:
          key: '${{ steps.extract_branch.outputs.branch }}'
          map: |
            {
              "main": {
                "BUILD_ALIAS": "production",
                "BUILD_VERSION": "${{ steps.package-version.outputs.current-version }}",
                "SECRET_NAME_FIREBASE_API_KEY": "PROD_FIREBASE_API_KEY",
                "SECRET_NAME_FIREBASE_APP_ID": "PROD_FIREBASE_APP_ID",
                "SECRET_NAME_FIREBASE_AUTH_DOMAIN": "PROD_FIREBASE_AUTH_DOMAIN",
                "SECRET_NAME_FIREBASE_DATABASE_U_R_L": "PROD_FIREBASE_DATABASE_U_R_L",
                "SECRET_NAME_FIREBASE_MESSAGING_SENDER_ID": "PROD_FIREBASE_MESSAGING_SENDER_ID",
                "SECRET_NAME_FIREBASE_PROJECT_ID": "PROD_FIREBASE_PROJECT_ID",
                "SECRET_NAME_FIREBASE_STORAGE_BUCKET": "PROD_FIREBASE_STORAGE_BUCKET",
                "SECRET_NAME_FUNCTIONS_REGION": "PROD_FUNCTIONS_REGION"
              },
              "develop": {
                "BUILD_ALIAS": "dev",
                "BUILD_VERSION": "${{ steps.package-version.outputs.current-version }}-alpha+${{ github.run_number }}",
                "SECRET_NAME_FIREBASE_API_KEY": "DEV_FIREBASE_API_KEY",
                "SECRET_NAME_FIREBASE_APP_ID": "DEV_FIREBASE_APP_ID",
                "SECRET_NAME_FIREBASE_AUTH_DOMAIN": "DEV_FIREBASE_AUTH_DOMAIN",
                "SECRET_NAME_FIREBASE_DATABASE_U_R_L": "DEV_FIREBASE_DATABASE_U_R_L",
                "SECRET_NAME_FIREBASE_MESSAGING_SENDER_ID": "DEV_FIREBASE_MESSAGING_SENDER_ID",
                "SECRET_NAME_FIREBASE_PROJECT_ID": "DEV_FIREBASE_PROJECT_ID",
                "SECRET_NAME_FIREBASE_STORAGE_BUCKET": "DEV_FIREBASE_STORAGE_BUCKET",
                "SECRET_NAME_FUNCTIONS_REGION": "DEV_FUNCTIONS_REGION"
              },
              ".*": {
                "VITE_EMU_PORT_AUTH": "",
                "VITE_EMU_PORT_FIRESTORE": "",
                "VITE_EMU_PORT_FUNCTIONS": ""
              }
            }

      - name: 'Setup: Google Cloud SDK'
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: 'Setup: Service account config'
        run: 'echo "$SERVICE_ACCOUNT_KEY" > configs/service-account.${{ env.BUILD_ALIAS }}.json'
        shell: bash
        env:
          SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: 'Setup: Copy cached deps'
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: 'Setup: Install new deps'
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn --immutable

      - name: 'Build: common'
        run: cd common && yarn build

      - name: 'Build: functions'
        run: cd functions && yarn build

      - name: 'Build: hosting'
        run: cd hosting && rm -f .env && yarn build
        env:
          NODE_ENV: production
          VITE_FIREBASE_API_KEY: ${{ secrets[env.SECRET_NAME_FIREBASE_API_KEY] }}
          VITE_FIREBASE_APP_ID: ${{ secrets[env.SECRET_NAME_FIREBASE_APP_ID] }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets[env.SECRET_NAME_FIREBASE_AUTH_DOMAIN] }}
          VITE_FIREBASE_DATABASE_U_R_L: ${{ secrets[env.SECRET_NAME_FIREBASE_DATABASE_U_R_L] }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets[env.SECRET_NAME_FIREBASE_MESSAGING_SENDER_ID] }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets[env.SECRET_NAME_FIREBASE_PROJECT_ID] }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets[env.SECRET_NAME_FIREBASE_STORAGE_BUCKET] }}
          VITE_FUNCTIONS_REGION: ${{ secrets[env.SECRET_NAME_FUNCTIONS_REGION] }}
          VITE_BUILD_VERSION: ${{ env.BUILD_VERSION }}

      - name: 'Build: admin'
        run: cd admin && yarn build

      - name: 'Lint: ESLint & Vue'
        run: yarn lint

      - name: 'Test: Execute'
        run: yarn test:ci

      - name: 'Test: Results reporter'
        uses: tanmen/jest-reporter@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          action-name: 'Tests'

      - name: 'Deploy: Backup Firestore'
        if: steps.extract_branch.outputs.branch == 'main'
        run: cd admin && yarn backup "Pre-deploy ${{ env.BUILD_VERSION }}" ${{ env.BUILD_ALIAS }}

      - name: 'Deploy: Wait at turnstile'
        uses: softprops/turnstyle@v1
        with:
          abort-after-seconds: 300
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Deploy: Functions, Hosting, Rules & Indexes'
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting -m "${{ env.BUILD_VERSION }}"
        env:
          FIREBASE_TOKEN: '${{ secrets.FIREBASE_CI_TOKEN }}'
          PROJECT_ID: '${{ secrets[env.SECRET_NAME_FIREBASE_PROJECT_ID] }}'

      - name: 'Deploy: Perform migrations'
        run: cd admin && yarn migrate --mode=${{ env.BUILD_ALIAS }} --yes
